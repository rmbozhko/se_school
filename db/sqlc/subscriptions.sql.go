// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: subscriptions.sql

package db

import (
	"context"
)

const createSubscription = `-- name: CreateSubscription :one
INSERT INTO subscriptions (
    email
) VALUES (
    $1
) RETURNING id, email
`

func (q *Queries) CreateSubscription(ctx context.Context, email interface{}) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, createSubscription, email)
	var i Subscription
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const getSubscriptionByEmail = `-- name: GetSubscriptionByEmail :one
SELECT id, email FROM subscriptions
WHERE email = $1
`

func (q *Queries) GetSubscriptionByEmail(ctx context.Context, email interface{}) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, getSubscriptionByEmail, email)
	var i Subscription
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const getSubscriptions = `-- name: GetSubscriptions :many
SELECT id, email FROM subscriptions
ORDER BY id
`

func (q *Queries) GetSubscriptions(ctx context.Context) ([]Subscription, error) {
	rows, err := q.db.QueryContext(ctx, getSubscriptions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Subscription{}
	for rows.Next() {
		var i Subscription
		if err := rows.Scan(&i.ID, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
